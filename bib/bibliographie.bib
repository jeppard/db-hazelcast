@book{test,
  author         = {Test Author and Tobias Test},
  editor         = {Test Editor},
  publisher      = {Test Publisher},
  title          = {Test Title},
  year           = {1990}
}

@online{HZcap,
	title = {{CAP} Theorem},
	author = {Hazelcast},
	date = {2022},
	url = {https://hazelcast.com/glossary/cap-theorem/},
	abstract = {{CAP} theorem states that a distributed computer system can at best provide only 2 of the 3 properties: Consistency, Availability, and Partition tolerance.},
	titleaddon = {Hazelcast},
	urldate = {2023-04-10},
	langid = {american},
}

@online{HZcap2,
	title = {{HazelVision} Episode 06 - {CAP} Theorem - {YouTube}},
	author = {Hazelcast},
	date = {2022},
	url = {https://www.youtube.com/watch?v=6DHxX_-fA8Y&list=PLhAaDrEJmCb3lpFQ6kDOkf_9wSdRp1cgx&index=10},
	urldate = {2023-04-10},
}

@online{baeldung_introduction_2016,
	title = {An Introduction to Hazelcast {\textbar} Baeldung},
	url = {https://www.baeldung.com/java-hazelcast},
	abstract = {An intro guide to using Hazelcast in Java - and a look at the cluster, client and distributed map.},
	author = {{baeldung}},
	urldate = {2023-04-10},
	date = {2016-10-21},
	langid = {american},
}

@misc{HZclient,
	title = {Getting {Started} with a {Hazelcast} {Client}},
	author = {Hazelcast},
	date = {2022},
	url = {https://docs.hazelcast.com/hazelcast/latest/clients/hazelcast-clients},
	urldate = {2023-04-12},
}


@online{HZintro,
	title = {Hazelcast {IMDG} - Leading open source in-memory data grid • Hazelcast},
	author = {Hazelcast},
	url = {https://hazelcast.org/imdg/},
	date = {2022},
	abstract = {Hazelcast {IMDG} is the leading open source, distributed, highly available, cloud-native, in-memory data store and compute grid. It is multi-model, storing data in a wide variety of structures, supporting {JSON} and language-native objects. It is multi-threaded and can process millions of operations per second with latencies in microseconds at scale. It is simple to use, no additional or third party coordination processes are required.},
	titleaddon = {Hazelcast},
	urldate = {2023-04-10},
	langid = {american},
}

@online{HZfirstapp,
	title = {Hazelcast - First Application},
	author = {Hazelcast},
	date = {2022},
	url = {https://www.tutorialspoint.com/hazelcast/hazelcast_first_application.htm},
	abstract = {Hazelcast First Application - Hazelcast can be run in isolation (single node) or multiple nodes can be run to form a cluster. Let us first try starting a single instance.},
	urldate = {2023-04-10},
	langid = {american},
}

@online{HZfeature,
	title = {Feature Comparison},
	author = {Hazelcast},
	date = {2022},
	url = {https://hazelcast.com/product-features/feature-comparison/},
	abstract = {Compare features across Hazelcast editions.},
	titleaddon = {Hazelcast},
	urldate = {2023-04-10},
	langid = {american},
}

@video{hazelcast_what_2022,
	title = {What is the Hazelcast Platform? {\textbar} Hazelcast Explainer},
	url = {https://www.youtube.com/watch?v=UpIgHzKbMp0},
	shorttitle = {What is the Hazelcast Platform?},
	abstract = {In this video, we introduce the concepts of data in motion and data at rest. We show how the Hazelcast platform sits at the junction of these two types of data to provide real-time data handling. We then describe an example of implementing Hazelcast.
	
	-------
	
	Hazelcast is empowering the world to act instantaneously on data everywhere. We are the home of the real-time data platform that enables enterprises to capture value at every moment. We provide a cloud-managed service that simplifies the development and deployment of real-time applications.
	
	Join the conversation: https://www.twitch.tv/thehazelcast/sc... 
	Connect with us: https://www.linkedin.com/company/haze...
	Tweet at us: https://twitter.com/hazelcast
	Friend us: https://www.facebook.com/hazelcast},
	author = {{Hazelcast}},
	urldate = {2023-04-10},
	date = {2022-11-03},
}

@online{HZmicrobatch,
	title = {Micro Batch Processing},
	author = {Hazelcast},
	date = {2022},
	url = {https://hazelcast.com/glossary/micro-batch-processing/},
	abstract = {Micro-batch processing vs stream processing: Is micro-batch processing fast enough? Learn which approach is right for your data processing requirements.},
	titleaddon = {Hazelcast},
	urldate = {2023-04-10},
	langid = {american},
}

@online{HZkappa,
	title = {Kappa Architecture},
	author = {Hazelcast},
	url = {https://hazelcast.com/glossary/kappa-architecture/},
	abstract = {The Kappa Architecture is a software architecture for processing streaming data in both real-time \& with batch processing using a single technology stack.},
	titleaddon = {Hazelcast},
	urldate = {2023-04-10},
	langid = {american},
}

@online{HZcpsub,
	title = {{CP} Subsystem},
	author = {Hazelcast},
	date = {2022},
	url = {https://docs.hazelcast.com/imdg/4.2/cp-subsystem/cp-subsystem},
	urldate = {2023-04-10},
}

@online{HZobjects,
	title = {Overview of Hazelcast Distributed Objects},
	author = {Hazelcast},
	date = {2022},
	url = {https://docs.hazelcast.com/imdg/4.2/data-structures/overview#:~:text=Hazelcast%20has%20two%20types%20of%20distributed%20objects%20in,stores%20the%20whole%20instance%2C%20namely%20non-partitioned%20data%20structures.},
	urldate = {2023-04-10},
}

@online{HZtransactions,
	title = {Creating a Transaction Interface},
	author = {Hazelcast},
	date = {2022},
	url = {https://docs.hazelcast.com/imdg/4.2/transactions/creating-a-transaction-interface},
	urldate = {2023-04-10},
}

@article{Fischerimpos,
	title = {Impossibility of distributed consensus with one faulty process},
	abstract = {The consensusproblem involves an asynchronous system of processes,some of which may be unreliable. The problem is for the reliable processesto agree on a binary value. In this paper, it is shown that every protocol for this problem has the possibility of nontermination, even with only one faulty process. By way of contrast, solutions are known for the synchronous case, the “Byzantine Generals” problem.},
	author = {Fischer, J and Lynch, A},
	date = {1985-04-01},
	langid = {english},
}

@online{HZreplic,
	title = {Hazelcast’s Replication Algorithm},
	author = {Hazelcast},
	url = {https://docs.hazelcast.com/hazelcast/5.0/consistency-and-replication/replication-algorithm},
	date = {2022},
	urldate = {2023-04-10},
}

@inproceedings{WoosRaft,
	location = {St. Petersburg {FL} {USA}},
	title = {Planning for change in a formal verification of the raft consensus protocol},
	isbn = {978-1-4503-4127-1},
	url = {https://dl.acm.org/doi/10.1145/2854065.2854081},
	doi = {10.1145/2854065.2854081},
	eventtitle = {{CPP} 2016: Certified Proofs and Programs},
	pages = {154--165},
	booktitle = {Proceedings of the 5th {ACM} {SIGPLAN} Conference on Certified Programs and Proofs},
	publisher = {{ACM}},
	author = {Woos, Doug and Wilcox, James R. and Anton, Steve and Tatlock, Zachary and Ernst, Michael D. and Anderson, Thomas},
	urldate = {2023-04-10},
	date = {2016-01-18},
	langid = {english},
}

@online{KrepsLambda,
	title = {Questioning the Lambda Architecture - O'Reilly Radar},
	url = {http://radar.oreilly.com/2014/07/questioning-the-lambda-architecture.html},
	date = {2022},
	abstract = {Nathan Marz wrote a popular blog post describing an idea he called the Lambda Architecture (How to beat the {CAP} theorem). The Lambda Architecture is an approach to building...},
	author = {Kreps, Jay},
	urldate = {2023-04-10},
	langid = {american},
}

@article{OngaroConsensus,
	title = {In Search of an Understandable Consensus Algorithm},
	abstract = {Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efﬁcient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems. In order to enhance understandability, Raft separates the key elements of consensus, such as leader election, log replication, and safety, and it enforces a stronger degree of coherency to reduce the number of states that must be considered. Results from a user study demonstrate that Raft is easier for students to learn than Paxos. Raft also includes a new mechanism for changing the cluster membership, which uses overlapping majorities to guarantee safety.},
	author = {Ongaro, Diego and Ousterhout, John},
	langid = {english},
}

@misc{HZfailure,
	title = {Failure {Detector} {Configuration}},
	author = {Hazelcast},
	url = {https://docs.hazelcast.com/imdg/4.2/clusters/failure-detector-configuration},
	date = {2022},
	urldate = {2023-04-12},
	file = {Failure Detector Configuration:C\:\\Users\\alexe\\Zotero\\storage\\UJYTMN4L\\failure-detector-configuration.html:text/html},
}

@article{Brewer2000,
	title = {Towards Robust Distributed Systems},
	author = {Brewer, Dr Eric A},
	date = {2000},
	langid = {english},
}

@online{CodahalePart,
	title = {You Can’t Sacrifice Partition Tolerance},
	author = {Coda Hale},
	url = {https://codahale.com//you-cant-sacrifice-partition-tolerance/},
	abstract = {In which there are limits to the {CAP} conjecture.},
	titleaddon = {codahale.com},
	urldate = {2023-04-10},
	date = {2010-10-07},
	langid = {american},
}

@online{HZtopol,
	title = {Hazelcast Topologies},
	author = {Hazelcast},
	url = {https://docs.hazelcast.com/hazelcast/5.0/topologies},
	urldate = {2023-04-12},
}
